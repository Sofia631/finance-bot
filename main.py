from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes
from telegram.ext import filters
import csv
import datetime
import os

# Initialize data storage
USERS = {}


# Helper functions
def save_to_csv(user_id):
    if user_id in USERS:
        transactions = USERS[user_id].get("transactions", [])
        file_path = f"transactions_{user_id}.csv"
        with open(file_path, "w", newline="", encoding="utf-8") as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow(["Date", "Type", "Category", "Amount"])
            for t in transactions:
                writer.writerow([t["date"], t["type"], t["category"], t["amount"]])
        return file_path
    return None


def get_monthly_report(user_id):
    if user_id not in USERS or "transactions" not in USERS[user_id]:
        return "‚ÑπÔ∏è *–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞.*"

    now = datetime.datetime.now()
    transactions = USERS[user_id]["transactions"]
    monthly_transactions = [t for t in transactions if t["date"].month == now.month and t["date"].year == now.year]

    income = sum(t["amount"] for t in monthly_transactions if t["type"] == "–¥–æ—Ö–æ–¥")
    expense = sum(t["amount"] for t in monthly_transactions if t["type"] == "—Ä–∞—Å—Ö–æ–¥")
    balance = income - expense

    report = f"üìÖ *–û—Ç—á–µ—Ç –∑–∞ {now.strftime('%B %Y')}*\n"
    report += f"üí∞ –î–æ—Ö–æ–¥: *{income}*\n"
    report += f"üí∏ –†–∞—Å—Ö–æ–¥: *{expense}*\n"
    report += f"üìä –ë–∞–ª–∞–Ω—Å: *{balance}*"
    return report


# Command handlers
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in USERS:
        USERS[user_id] = {"transactions": [], "limit": None}
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –±–æ—Ç–∞!\n–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º–∏ üí∞ –¥–æ—Ö–æ–¥–∞–º–∏ –∏ üí∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏.",
        parse_mode="Markdown"
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "*–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:*\n"
        "üîπ /add - –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é\n"
        "üîπ /edit - –ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é\n"
        "üîπ /delete - –£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é\n"
        "üîπ /transactions - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n"
        "üîπ /report - –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü\n"
        "üîπ /setlimit - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤\n"
        "üîπ /export - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ CSV",
        parse_mode="Markdown"
    )


async def add_transaction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not context.args:
        await update.message.reply_text(
            "‚ö†Ô∏è –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: *\n/add –¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥, –∫–∞—Ç–µ–≥–æ—Ä–∏—è, —Å—É–º–º–∞*\n–ü—Ä–∏–º–µ—Ä: /add –¥–æ—Ö–æ–¥, –∑–∞—Ä–ø–ª–∞—Ç–∞, 5000",
            parse_mode="Markdown"
        )
        return

    try:
        data = " ".join(context.args).split(",")
        t_type, category, amount = data[0].strip(), data[1].strip(), float(data[2].strip())

        if t_type == "—Ä–∞—Å—Ö–æ–¥" and USERS[user_id].get("limit") is not None:
            total_expense = sum(t["amount"] for t in USERS[user_id]["transactions"] if t["type"] == "—Ä–∞—Å—Ö–æ–¥") + amount
            if total_expense > USERS[user_id]["limit"]:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –†–∞—Å—Ö–æ–¥ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç.")
                return

        transaction = {"type": t_type, "category": category, "amount": amount, "date": datetime.datetime.now()}
        USERS[user_id]["transactions"].append(transaction)
        await update.message.reply_text("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    except Exception:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –§–æ—Ä–º–∞—Ç: /add –¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥, –∫–∞—Ç–µ–≥–æ—Ä–∏—è, —Å—É–º–º–∞")


async def edit_transaction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in USERS or not USERS[user_id]["transactions"]:
        await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return


    if not context.args:
        await update.message.reply_text(
            "‚ö†Ô∏è –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
            "/edit <–∏–Ω–¥–µ–∫—Å>, <–¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥>, <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>, <—Å—É–º–º–∞>\n"
            "–ü—Ä–∏–º–µ—Ä: /edit 1, –¥–æ—Ö–æ–¥, –ø—Ä–µ–º–∏—è, 2000",
            parse_mode="Markdown"
        )
        return

    try:
        data = " ".join(context.args).split(",")
        index = int(data[0].strip()) - 1  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –≤ –±–∞–∑—É 0
        t_type, category, amount = data[1].strip(), data[2].strip(), float(data[3].strip())

        if 0 <= index < len(USERS[user_id]["transactions"]):
            USERS[user_id]["transactions"][index].update({
                "type": t_type,
                "category": category,
                "amount": amount,
                "date": datetime.datetime.now(),
            })
            await update.message.reply_text("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å.")
    except Exception:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞! –§–æ—Ä–º–∞—Ç: /edit <–∏–Ω–¥–µ–∫—Å>, <–¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥>, <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>, <—Å—É–º–º–∞>",
            parse_mode="Markdown"
        )


async def delete_transaction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in USERS or not USERS[user_id]["transactions"]:
        await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    if not context.args:
        await update.message.reply_text(
            "‚ö†Ô∏è –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: *\n/delete <–∏–Ω–¥–µ–∫—Å>*\n–ü—Ä–∏–º–µ—Ä: /delete 1",
            parse_mode="Markdown"
        )
        return

    try:
        index = int(context.args[0]) - 1  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –≤ –±–∞–∑—É 0

        if 0 <= index < len(USERS[user_id]["transactions"]):
            USERS[user_id]["transactions"].pop(index)
            await update.message.reply_text("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å.")
    except Exception:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –§–æ—Ä–º–∞—Ç: /delete <–∏–Ω–¥–µ–∫—Å>")


async def transactions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in USERS or not USERS[user_id]["transactions"]:
        await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
        return

    response = "üìú *–í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:*\n"
    for i, t in enumerate(USERS[user_id]["transactions"], start=1):
        response += f"{i}. {t['date'].strftime('%Y-%m-%d')} - {t['type']} - {t['category']} - {t['amount']}\n"
    await update.message.reply_text(response, parse_mode="Markdown")


async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    report_text = get_monthly_report(user_id)
    await update.message.reply_text(report_text, parse_mode="Markdown")


async def set_limit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not context.args:
        await update.message.reply_text(
            "‚ö†Ô∏è –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏–º–∏—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: *\n/setlimit —Å—É–º–º–∞*\n–ü—Ä–∏–º–µ—Ä: /setlimit 20000",
            parse_mode="Markdown"
        )
        return

    try:
        limit = float(context.args[0])
        USERS[user_id]["limit"] = limit
        await update.message.reply_text(f"‚úÖ –õ–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {limit}")
    except Exception:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –§–æ—Ä–º–∞—Ç: /setlimit —Å—É–º–º–∞")


async def export_transactions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    file_path = save_to_csv(user_id)
    if file_path:
        with open(file_path, "rb") as f:
            await update.message.reply_document(f, filename=os.path.basename(file_path))
        os.remove(file_path)
    else:
        await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")


# Main function
def main():
    application = ApplicationBuilder().token("7787143852:AAGvvBRNYjbVhL6KVJbPhTYCpZ3SI6s_Kdg").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("add", add_transaction))
    application.add_handler(CommandHandler("edit", edit_transaction))
    application.add_handler(CommandHandler("delete", delete_transaction))
    application.add_handler(CommandHandler("transactions", transactions))
    application.add_handler(CommandHandler("report", report))
    application.add_handler(CommandHandler("setlimit", set_limit))
    application.add_handler(CommandHandler("export", export_transactions))

    application.run_polling()

if __name__ == "__main__":
    main()